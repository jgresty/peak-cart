Peak Technical Test
===================

Microservice that powers the shopping cart of an e-commerce website.

Technical interview test for Peak.ai.


TODO
----

Implement that last endpoint
Automate auth setup


Endpoints
---------

 - Add item to basket
    - POST / { items: itemId[] }

 - Remove item from basket
    - DELETE /:basketItemId

 - Clear basket
    - PUT / { items: [] }

 - List all items
    - GET /

 - Fit into single delivery box (10 KG)
   - input: { id[], weight[], days to deliver[] } 
       (side note: why is this not an array of items)
   - output: { id[], delivery days sum }

I'll plan the last one in more detail later


Persistence
-----------

Data can be stored in memory for purpose of demonstration. Everything is in
src/store.ts to keep the logic away from the service endpoints, this way the
services can be stateless. Pretty much everything in that file would be
replaced with a proper data layer.

Language / tech
---------------

Chosen typescript as it is an interview test and that is what everyone is
expecting what I will be doing on the job the most. Paired with express as it
is easy to do this kind of thing in it as well as it being very widely
supported. Testing done with jest as that is what is the most popular at the
moment.


Assumptions
-----------

One basket per user, that makes sense for an e-commerce website - that means we
don't need a basket model as the user id will be the basket id

All items are already known, maybe by some external service that we can verify
with, but for this demonstration I am going to encode them in a static list.
This way the client only needs to send us an id and we can trust it.

Deployment strategy isn't specified, this should be deployed in line with the
rest of the system. I'll keep as much of the application as stateless as
possible so that it can be deployed to whatever platform.

More over granularity isn't specified - as this is pretty small I would deploy
this all as one unit but I'll make it easy to deploy as individual functions
with minimal changes and some code splitting.


Auth
----

Usually this would be already handled by the larger system, we don't have a
larger system here but I need something to identify users. I'd like to have
something real feeling as opposed to just implicitly trusting every request
belongs to the user they say it does.

Thinking openid connect as this is a microservice, possibly with jwt to keep
the service stateless.
